name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  snyk-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk to check for vulnerabilities
        run: snyk test --file=pom.xml --severity-threshold=critical
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Monitor project with Snyk
        run: snyk monitor --file=pom.xml
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  dockerfile-scan:
    needs: snyk-scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Scan Dockerfile with Trivy
        run: trivy config --exit-code 1 --severity HIGH,CRITICAL .

  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch all branches and tags
        run: git fetch --prune --unshallow

      - name: Determine Branch and Commit Count
        id: determine_branch_and_commit_count
        run: |
          BRANCH=$(echo "${{ github.ref }}" | awk -F'/' '{print $NF}')
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          MAJOR_VERSION=$(echo $CURRENT_VERSION | cut -d'.' -f1)
          MINOR_VERSION=$(echo $CURRENT_VERSION | cut -d'.' -f2)
          PATCH_VERSION=$(echo $CURRENT_VERSION | cut -d'.' -f3)
          if [ "$BRANCH" = "master" ]; then
            NEW_VERSION=$(($MAJOR_VERSION + 1)).0.0
          elif [[ "$BRANCH" == "feature"* ]]; then
            NEW_VERSION=$MAJOR_VERSION.$(($MINOR_VERSION + 1)).0
          elif [[ "$BRANCH" == "fixes"* ]]; then
            NEW_VERSION=$MAJOR_VERSION.$MINOR_VERSION.$(($PATCH_VERSION + 1))
          else
            echo "::error::Unsupported branch"
            exit 1
          fi
          mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false
          git pull
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git commit -am "Bump version to $NEW_VERSION"
          git push origin master
          echo "::set-output name=version::$NEW_VERSION"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          build-args: VERSION=1.0.${{ github.run_number }}
          context: .
          push: true
          tags: strukovsergei/test-rep:githubapp-1.0.${{ github.run_number }}

  provision-ec2:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.TF_USER_AWS_KEY }}'
          aws-secret-access-key: '${{ secrets.TF_USER_AWS_SECRET }}'
          aws-region: us-east-2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Terraform Apply
        id:   apply
        run: |
          terraform init
          terraform validate
          terraform plan 
          terraform apply -auto-approve

  sonarcloud-analysis:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn sonar:sonar -Dsonar.projectKey=your_project_key -Dsonar.organization=your_organization -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN